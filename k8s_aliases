#K8S Shortcuts
alias kcpo="kc get po" # get me all the pooooo
alias kcdd="kc describe deployment " # descibe deployment by name 
alias kcl="kc logs " # get pod logs
alias kwatch="kc get po --watch | grep "
alias kcpg="kc get po | grep "
function kcba { 
    if [ -z "$1" ]
    then
      echo "missing the app"
    else
      kubectl -l app=${1} get pods,svc,secrets,deployments
    fi
}

# Quickly display / switch kubernetes contexts
alias kc="kubectl"
 
 
function kcsc
{
  local context=${1}
  if [[ -z "$context" ]]; then
    kubectl config get-contexts
  else
    kubectl config use-context ${context}
  fi
}
 
 
function _kcsc_complete {
    local word=${COMP_WORDS[COMP_CWORD]}
    local list=$(kubectl config get-contexts --no-headers | tr -d '\*' | awk '{print $1}')
    list=$(compgen -W "$list" -- "$word")
    COMPREPLY=($list)
    return 0
}
complete -F _kcsc_complete kcsc
 
 
# Quickly display / switch kubernetes namespaces
function kcns
{
  local namespace=${1}
  if [[ -z "$namespace" ]]; then
    kubectl get ns
  else
    local context=$(kubectl config current-context)
    echo "Setting context ${context} to namespace ${namespace}..."
    kubectl config set-context ${context} --namespace ${namespace}
  fi
}
 
 
function _kcns_complete {
    local word=${COMP_WORDS[COMP_CWORD]}
    local list=$(kubectl get ns --no-headers | awk '{print $1}')
    list=$(compgen -W "$list" -- "$word")
    COMPREPLY=($list)
    return 0
}
complete -F _kcns_complete kcns
 
 
# Finds the WAN IP of a given kubernetes node
function kube-node-wan
{
  local node=${1:?}
  kubectl describe node/${node} \
    | awk '/Addresses/ {
        split($2, ips, ",");
        for (i in ips) {
          if ( match(ips[i], /(192\.168|10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.)/) == 0 ) {
            print ips[i]
          }
        }
      }'
}
 
 
# Lists all kubernetes worker nodes and their WAN IP
function kube-nodes
{
  local nodes=$(kubectl get nodes --no-headers \
    | grep -v 'SchedulingDisabled' \
    | cut -d ' ' -f 1
  )
 
 
  for node in $nodes; do
    local node_wan=$(kube-node-wan ${node})
 
 
    echo "$node - $node_wan"
  done
}
 
 
# Returns the WAN IP for the node on which a given pod is running
function kube-pod-wan
{
  local pod=${1:?}
  local node=$(kubectl describe po ${pod} \
    |awk '/^Node:/ { split($NF, node, "/"); print node[1] }')
 
 
  kube-node-wan $node
}
 
 
# A quick and dirty way to show the resource availability in a kube cluster
#TODO: This should be re-written and expanded
function kube-capacity {
  local nodes=$(kubectl get no --no-headers | awk '$0 !~ /Disabled/ {print $1}')
  for node in $nodes; do
    echo -n "Node ${node} - "
    kubectl describe no $node \
      | grep -A4 'Allocated resources' \
      | tail -n1 \
      | awk '{print "CPU Requests " $1 " " $2 " Memory Requests: " $5 " " $6}'
  done
}
 
 
# Grab a shell / execute a comand on a running pod
function kube-shell
{
  local pod=${1:?}
  shift
 
 
  # Some lazy argument parsing to see if a container is specified
  if  [[ "$1" == "-c" ]]; then
    shift
    local container=" -c ${1:?}"
    shift
  fi
 
 
  local cols=$(tput cols)
  local lines=$(tput lines)
  local term='xterm'
  local cmd=$@
  cmd=${cmd:-bash}
 
 
  kubectl exec -it $pod $container -- env COLUMNS=$cols LINES=$lines TERM=$term "$cmd"
}
